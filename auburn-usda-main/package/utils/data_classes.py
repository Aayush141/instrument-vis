import dataclasses
from dataclasses import dataclass
from package.utils.enums import AnnotationType
from package.range_marker import RangeMarker
from qwt import QwtPlotMarker

@dataclass
class DataPoint:
    time: float
    voltage: float
    channel: int=0

    def __post_init__(self):
        for field in dataclasses.fields(self):
            value = getattr(self, field.name)
            if not isinstance(value, field.type):
                setattr(self, field.name, field.type(value))

    def __str__(self):
        return f"DataPoint: time:float={self.time}, voltage:float={self.voltage}, channel:int={self.channel}"


@dataclass
class Annotation:
    timeStart: float
    clockTime: str  
    text: str = ""
    duration: float = 0
    annotationType: AnnotationType = AnnotationType.POINT
    autogenerated: bool = False 
    channel: int = 0
    id: int = 0

    def __post_init__(self):
        for field in dataclasses.fields(self):
            value = getattr(self, field.name)

            if not isinstance(value, field.type):
                setattr(self, field.name, field.type(value))

@dataclass
class EPGParameters:
    inputResistance: int
    amplifierGain: int
    dcBias: float
    excitationAmplitude: float
    excitationFrequency: int

    def __post_init__(self):
        for field in dataclasses.fields(self):
            value = getattr(self, field.name)
            if not isinstance(value, field.type):
                setattr(self, field.name, field.type(value))

    def __str__(self):
        return f"EPGParameters: inputResistance:int={self.inputResistance}, amplifierGain:int={self.amplifierGain}, dcBias:float={self.dcBias}, excitationAmplitude:float={self.excitationAmplitude}, excitationFrequency:int={self.excitationFrequency}"

@dataclass 
class MarkerGroup:
    id: int
    marker: RangeMarker
    leftBorder: QwtPlotMarker
    rightBorder: QwtPlotMarker=None 
